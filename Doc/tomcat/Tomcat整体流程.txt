分析tomcat源码时，首先需要自顶而下的看待，Tomcat架构分为两部分：连接端和容器端。
连接端启动之前需要容器先都加载准备好。，所以Tomcat先启动容器端。

不管Container还是Connector都是组件，是组件都有生命周期，所以他们都实现了Lifecycle接口，Lifecycle接口
定义了基本的init、start、stop和destroy方法，用来指代常用的阶段。




<-----------------------------digest解析生成对象及初始化------------------>
Digest解析
    ----->StandardServer初始化
    ----->StandardService初始化
    ----->Connector带参数初始化(HTTP/1.1)
         ------------->Http11NioProtocol实例化
                     ------------> super(new NioEndpoint());
        ？？初始化两次

    ----->StandardEngine初始化
          添加EngineConfig作为listerner

    ----->StandardHost初始化
          添加HostConfig作为listerner

    ----->调用StandardEngine的addChild方法StandardHost
    ----->调用StandardServer的addService的

<-----------------------------init------------------>
getServer().init();
    ------>StnadardServer init
            ----->engine.init()
                ----->ContainerBase.init
                ```
                    BlockingQueue<Runnable> startStopQueue = new LinkedBlockingQueue<>();
                    startStopExecutor = new ThreadPoolExecutor(
                    getStartStopThreadsInternal(),
                    getStartStopThreadsInternal(), 10, TimeUnit.SECONDS,
                    startStopQueue,
                    new StartStopThreadFactory(getName() + "-startStop-"));
                    startStopExecutor.allowCoreThreadTimeOut(true);
                    super.initInternal();
                ```
            ----->executor.init()
            ----->mapperListener.init()
            ----->connector.init()
<-----------------------------start------------------>
bootStrip.Start()
    ------>StnadardServer start
            ----->engine.start()
                ----->ContainerBase.start()
                    ----->Realm.start()
                    ----->子容器(Standardhost)线程启动
                            Container children[] = findChildren();
                            List<Future<Void>> results = new ArrayList<>();
                            for (int i = 0; i < children.length; i++) {
                                results.add(startStopExecutor.submit(new StartChild(children[i])));
                            }
                        子容器需要先调用init再调用start
                    ----> 子容器在启动后会调用setState(LifecycleState.STARTING);
                      ------>触发了hostconfig的start方法
                        ------>deployApps，分为3种类型的部署
                                 在加载xml的过程中会解析xml生成StandContext类，
                                 调用StandardHost的addchild方法
                                    ---->调用StandardContext的start方法
                                        ----->setResources(new StandardRoot(this));
                                        ----->resourcesStart

                                deployDescriptors
                                        
                                deployWARs
                                        、C:\workspace\Tomcat9\webapps、及下面的文件夹
                                deployDirectories

                               
            ----->executor.start()
            ----->mapperListener.start()
            ----->connector.start()

    ----->所有继承ContainBase的类都会通过线程池FtureTask启动
    ----->StandardHost的StartInternal方法，fireEvent启动，init、start
    ----->StandardContext的start方法： setResources(new StandardRoot(this));
